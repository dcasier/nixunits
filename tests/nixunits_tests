#!/bin/bash
set -e -o pipefail
shopt -s expand_aliases

. _NIXUNITS_PATH_SED_/tests/json_status

ID="8643a4f5-c137-44ef-953e-e8b4aca9f924"
NETNS="8643a4f5"
PRIVATE_HOST_IP4="10.0.1.1"
PRIVATE_IP4="10.0.2.2"
PRIVATE_HOST_IP6="fc00::d:e:f:1"
PRIVATE_IP6="fc00::a:b:c:2"

# TODO : sandbox (Hydra ? )

DEBUG=0
WITH_OVS=false
STEP=0

while getopts "dos:" opt; do
  case $opt in
    d)
      DEBUG=1;;
    o)
      WITH_OVS=true;;
    s)
      STEP=$OPTARG;;
    *)
      echo "Invalid option"
      exit 1;;
  esac
done

test $DEBUG == 1 && set -ex

_err_msg=" ! ! ! ERROR - Invalid result ! ! !"

_assert_equal() {
  if [ "$1" != "$2" ]; then
    echo "$_err_msg"
    diff -u <(echo "$1") <(echo "$2")
    exit 1
  fi
}

alias _nixunits=_NIXUNITS_PATH_SED_/bin/nixunits
_json() { _nixunits status $ID -d -o json; }
_jq() { _json | jq -r ".$1"; }
_json_without_addr() { _json | jq 'del(.addresses)'; }

_ping() {
  attempt=0
  while [ $attempt -lt 5 ]; do
    ping -c 1 -w 5 $1 && return
    attempt=$((attempt + 1))
  done
  >&2 echo "FAILED ping $1"
  exit 1
}

_step() {
  if [ "$STEP" -le "$1" ]
  then
    echo " = = = Step $1 : $2 = = ="
    true
  else
    false
  fi
}

httpd_def="{ services.httpd.enable = true; }"

test "$(_jq declared_in_nixos)" == true && echo "Declared in NixOS" && exit 1

# _nixunits delete $ID -frg > /dev/null
_nixunits delete $ID -fr > /dev/null
_assert_equal "$(_json)" "$STATUS_1_INITIAL"

if _step 1 "initial build"; then
  nixunits build $ID -cc -  >/dev/null <<EOF
{
  services.httpd.enable = true;
}
EOF
  _assert_equal "$(_json)" "$STATUS_1_CREATED"

  nixunits delete $ID -f
  _assert_equal "$(_json)" "$STATUS_1_INITIAL"
fi

if _step 2 "initial build -6"; then
  nixunits build $ID -cc "$httpd_def" -6 >/dev/null
  _assert_equal "$(_json)" "$STATUS_1_CREATED"
  _assert_equal "$(_nixunits status $ID -cc "{ services.httpd.enable = false; }" -o json)" "$STATUS_1_CREATED"
  _assert_equal "$(_nixunits status $ID -cc "$httpd_def" -o json)" "$STATUS_1_CREATED_NIX_SAME"
fi

if _step 3 "IPv6 auto-generated"; then
  nixunits build $ID -cc "$httpd_def" -6 -s >/dev/null
  _assert_equal "$(_json_without_addr)" "$STATUS_1_STARTED_DETAILS"
  _ping "$(nixunits ip6_get "$ID")" | grep -A 1 statistiques
fi

if _step 4 "Restart"; then
  nixunits build $ID -cc "$httpd_def" -6 -r >/dev/null
  _assert_equal "$(_json_without_addr)" "$STATUS_1_STARTED_DETAILS"
  _ping "$(nixunits ip6_get "$ID")" | grep -A 1 statistiques
  nixunits delete $ID -f
  _assert_equal "$(_json)" "$STATUS_1_INITIAL_WITH_DATA"
fi

if _step 5 "IPv4 restart"; then
  nixunits build $ID -cc "$httpd_def" \
    -4 "$PRIVATE_IP4" -H4 "$PRIVATE_HOST_IP4" -r >/dev/null
  _assert_equal "$(_json_without_addr)" "$STATUS_1_STARTED_DETAILS"
  _ping "$PRIVATE_IP4" | grep -A 1 statistiques
  nixunits delete $ID -fr
  _assert_equal "$(_json)" "$STATUS_1_INITIAL"
fi

if _step 6 "IPv4 and IPv6 restart"; then
  nixunits build $ID -cc "$httpd_def" \
    -4 "$PRIVATE_IP4" -H4 "$PRIVATE_HOST_IP4" \
    -6 "$PRIVATE_IP6" -H6 "$PRIVATE_HOST_IP6" -r >/dev/null
  _assert_equal "$(_json_without_addr)" "$STATUS_1_STARTED_DETAILS"
  _ping "$PRIVATE_IP4" | grep -A 1 statistiques
  _ping "$PRIVATE_IP6" | grep -A 1 statistiques
  nixunits delete $ID -fr
  _assert_equal "$(_json)" "$STATUS_1_INITIAL"
fi

# Broken
#if _step 7 "NetNS"; then
#  ip link | grep "ve_A_$NETNS" >/dev/null && ip link del "ve_A_$NETNS"
#  ip netns |grep "$NETNS" >/dev/null && ip netns del "$NETNS"
#  ip netns add "$NETNS"
#  ip link add "ve_A_$NETNS" type veth peer name "ve_B_$NETNS"
#  nixunits build $ID -cc "$httpd_def" -n "/var/aevoo/aevoo/dev/os/nixunits/$ID/$NETNS" -r >/dev/null
#  ip a add $PRIVATE_HOST_IP4 dev "ve_A_$NETNS"
#  ip link set dev "ve_B_$NETNS" netns "$NETNS"
#  ip netns exec $NETNS ip a add $PRIVATE_IP4 dev "ve_B_$NETNS"
#  _ping "$PRIVATE_IP4" | grep -A 1 statistiques
#fi

# nixunits delete $ID -f
# test "$(_json)" != "$STATUS_1_INITIAL" && _err "Invalid initial status : $(_json)"

echo " = = = TESTS OK  = = = "
